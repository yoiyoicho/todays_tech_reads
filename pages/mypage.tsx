/**
 * This original code was generated by v0 by Vercel.
 * @see https://v0.dev/t/YPdBb8ZvvCY
 */

import React, { useMemo } from 'react';
import { GetServerSideProps } from 'next';
import Header from '../components/Header';
import Post from '../components/Post';
import PostSubmitForm from '../components/PostSubmitForm';
import prisma from '../lib/prisma';
import { PostType } from '../types/PostType';
import { getSession } from '@auth0/nextjs-auth0';
import { fetchMetadata } from '@/lib/fetchMetadata';
import { useState, useEffect } from 'react';
import { parseDateHash, areDatesEqual, formatDateForHead, formatDateForHash } from '../lib/utils';
import Footer from '../components/Footer';
import Ice from '../components/Ice';

type PropsType = {
  posts: PostType[];
}

export default function MyPage({ posts }: PropsType ) {
  const [selectedDate, setSelectedDate] = useState<Date>(() => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return today;
  });

  const filterdPosts = (date: Date) => {
    return posts.filter((post) => {
      const postDate = new Date(post.createdAt);
      return areDatesEqual(date, postDate);
    })
  };

  const [selectedPosts, setSelectedPosts] = useState<PostType[]>(
    filterdPosts(selectedDate)
  );
  const postCountByDate: Map<string, number> = useMemo(() => {
    const map = new Map<string, number>();
    posts.forEach((post) => {
      const date = new Date(post.createdAt);
      // 日本時間でYYYY/MM/DDの形式
      const formattedDate = date.toLocaleString('ja-JP', { year: "numeric", month: '2-digit', day: '2-digit' });
      const count = map.get(formattedDate) || 0;
      map.set(formattedDate, count + 1);
    })
    return map;
  },[posts]);

  // URLハッシュからselectedDateを更新
  useEffect(() => {
    const hashChanged = () => {
      const hash = window.location.hash.slice(1);
      const hashDate = parseDateHash(hash);
      setSelectedDate(hashDate);
    };

    window.addEventListener('hashchange', hashChanged);
    hashChanged();

    return () => window.removeEventListener('hashchange', hashChanged);
  }, []);

  // selectedDateの変更をURLハッシュに反映
  useEffect(() => {
    const selectedPosts = filterdPosts(selectedDate);
    const today = new Date();
    setSelectedPosts(selectedPosts);

    const hash = formatDateForHash(selectedDate);
    window.location.hash = hash;
  }, [selectedDate])

  return (
    <div key="1" className="bg-[#5590c9] min-h-screen p-4">
      <div className="max-w-2xl mx-auto">
        <Header />
        <div className="grid gap-4">
          <div className="flex items-center justify-center space-x-2 text-2xl font-bold text-[#000000]">
            {formatDateForHead(selectedDate)}
          </div>
          <Ice selectedDate={selectedDate} setSelectedDate={setSelectedDate} postCountByDate={postCountByDate} />
          <PostSubmitForm />
          {selectedPosts.map((post, index) => (
            <Post key={index} post={post} />
          ))}
        </div>
      </div>
      <Footer />
    </div>
  )
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const session = await getSession(ctx.req, ctx.res);
  if (session) {
    const userId = session.user.sub;
    const posts = await prisma.post.findMany({
      where: {
        userId: userId,
      },
      select: {
        id: true,
        comment: true,
        createdAt: true,
        article: { // TODO: N+1が起きていないかの確認
          select: {
            id: true,
            url: true,
          },
        },
      },
    });
    const postsWithMetadata = await Promise.all(posts.map(async post => {
      const metadata = await fetchMetadata(post.article.url);
      return {
        ...post,
        createdAt: post.createdAt.toISOString(), // Dateオブジェクトを文字列に変換
        article: {
          ...post.article,
          ...metadata,
        },
      };
    }));
    return {
      props: { posts: postsWithMetadata },
    };
  } else {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      }, 
    }
  }
};
