/**
 * This original code was generated by v0 by Vercel.
 * @see https://v0.dev/t/YPdBb8ZvvCY
 */

import { GetServerSideProps } from 'next';
import Header from '../components/Header';
import ChevronLeftIcon from '../components/ChevronLeftIcon';
import ChevronRightIcon from '../components/ChevronRightIcon';
import Post from '../components/Post';
import PostSubmitForm from '../components/PostSubmitForm';
import prisma from '../lib/prisma';
import { PostType } from '../types/PostType';
import { getSession } from '@auth0/nextjs-auth0';
import axios from 'axios';
import cheerio from 'cheerio';
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';
import { parseDateHash, areDatesEqual, formatDateForHead, formatDateForHash } from '../lib/utils';

type PropsType = {
  posts: PostType[];
}

export default function MyPage({ posts }: PropsType ) {
  const router = useRouter();
  const [selectedDate, setSelectedDate] = useState<Date>(() => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return today;
  });

  const filterdPosts = (date: Date) => {
    return posts.filter((post) => {
      const postDate = new Date(post.createdAt);
      return areDatesEqual(date, postDate);
    })
  };

  const [selectedPosts, setSelectedPosts] = useState<PostType[]>(
    filterdPosts(selectedDate)
  );
  const [isToday, setIsToday] = useState<boolean>(true);

  const handleHashChange = () => {
    const hash = window.location.hash.slice(1);
    const hashDate = parseDateHash(hash);
    const today = new Date();
    const selectedPosts = filterdPosts(hashDate);

    if (areDatesEqual(hashDate, today)) {
      router.replace('/mypage', undefined, { shallow: true });
      setIsToday(true);
    } else {
      setIsToday(false);
    }
    setSelectedDate(hashDate);
    setSelectedPosts(selectedPosts);
  };

  const handleDate = (day: number) => {
    const newDate = new Date();
    newDate.setDate(selectedDate.getDate() + day);
    const newHashDate = formatDateForHash(newDate);
    router.replace(`/mypage#${newHashDate}`, undefined, { shallow: true })
      .then(() => {
        handleHashChange();
      });
  }

  useEffect(() => {
    window.addEventListener('hashchange', handleHashChange);
    return () => {
      window.removeEventListener('hashchange', handleHashChange);
    };
  }, []);

  return (
    <div key="1" className="bg-[#5590c9] min-h-screen p-4">
      <div className="max-w-2xl mx-auto">
        <Header />
        <div className="grid gap-4">
          <div className="flex items-center justify-center space-x-2 text-2xl font-bold text-[#000000]">
            <div onClick={() => handleDate(-1)}>
              <ChevronLeftIcon className="h-4 w-4" />
            </div>
            <span>{formatDateForHead(selectedDate)}</span>
            {!isToday && (
              <div onClick={() => handleDate(1)}>
                <ChevronRightIcon className="h-4 w-4" />
              </div>
            )}
          </div>
          <PostSubmitForm />
          {selectedPosts.map((post, index) => (
            <Post key={index} post={post} />
          ))}
        </div>
      </div>
    </div>
  )
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const session = await getSession(ctx.req, ctx.res);
  if (session) {
    const userId = session.user.sub;
    const posts = await prisma.post.findMany({
      where: {
        userId: userId,
      },
      select: {
        id: true,
        comment: true,
        createdAt: true,
        article: { // TODO: N+1が起きていないかの確認
          select: {
            id: true,
            url: true,
          },
        },
      },
    });
    const postsWithMetadata = await Promise.all(posts.map(async post => {
      const metadata = await fetchMetadata(post.article.url);
      return {
        ...post,
        createdAt: post.createdAt.toISOString(), // Dateオブジェクトを文字列に変換
        article: {
          ...post.article,
          ...metadata,
        },
      };
    }));
    return {
      props: { posts: postsWithMetadata },
    };
  } else {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      }, 
    }
  }
};

async function fetchMetadata (url: string) {
  try {
    const response = await axios.get(url);
    const html = response.data;
    const $ = cheerio.load(html);

    const title = $('title').text();
    const description = $('meta[name="description"]').attr('content') || $('meta[property="og:description"]').attr('content');
    const ogImage = $('meta[property="og:image"]').attr('content');

    return {
      ...(title && { title }),
      ...(description && { description }),
      ...(ogImage && { ogImage }),
    };
  } catch (error) {
    return { };
  }
}
