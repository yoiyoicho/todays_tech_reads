/**
 * This original code was generated by v0 by Vercel.
 * @see https://v0.dev/t/YPdBb8ZvvCY
 */

import { GetServerSideProps } from 'next';
import Header from '../components/Header';
import ChevronLeftIcon from '../components/ChevronLeftIcon';
import ChevronRightIcon from '../components/ChevronRightIcon';
import Post from '../components/Post';
import PostSubmitForm from '../components/PostSubmitForm';
import prisma from '../lib/prisma';
import { PostType } from '../types/PostType';
import { getSession } from '@auth0/nextjs-auth0';
import axios from 'axios';
import cheerio from 'cheerio';

type PropsType = {
  posts: PostType[];
}

export default function MyPage({ posts }: PropsType ) {
  return (
    <div key="1" className="bg-[#5590c9] min-h-screen p-4">
      <div className="max-w-2xl mx-auto">
        <Header />
        <div className="grid gap-4">
          <div className="flex items-center justify-center space-x-2 text-2xl font-bold text-[#000000]">
            <ChevronLeftIcon className="h-4 w-4" />
            <span>2023/1/23 Tue.</span>
            <ChevronRightIcon className="h-4 w-4" />
          </div>
          <PostSubmitForm />
          {posts.map((post, index) => (
            <Post key={index} post={post} />
          ))}
        </div>
      </div>
    </div>
  )
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const session = await getSession(ctx.req, ctx.res);
  if (session) {
    const userId = session.user.sub;
    const posts = await prisma.post.findMany({
      where: {
        userId: userId,
      },
      select: {
        id: true,
        comment: true,
        article: { // TODO: N+1が起きていないかの確認
          select: {
            id: true,
            url: true,
          },
        },
      },
    });
    const postsWithMetadata = await Promise.all(posts.map(async post => {
      const metadata = await fetchMetadata(post.article.url);
      return {
        ...post,
        article: {
          ...post.article,
          ...metadata,
        },
      };
    }));
    return {
      props: { posts: postsWithMetadata },
    };
  } else {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      }, 
    }
  }
};

async function fetchMetadata (url: string) {
  try {
    const response = await axios.get(url);
    const html = response.data;
    const $ = cheerio.load(html);

    const title = $('title').text();
    const description = $('meta[name="description"]').attr('content') || $('meta[property="og:description"]').attr('content');
    const ogImage = $('meta[property="og:image"]').attr('content');

    return {
      ...(title && { title }),
      ...(description && { description }),
      ...(ogImage && { ogImage }),
    };
  } catch (error) {
    return { };
  }
}
